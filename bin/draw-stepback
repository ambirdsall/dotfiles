#!/usr/local/bin/guile
!#

(use-modules (srfi srfi-42))
(use-modules (ice-9 regex))

;; * ascii art
;; ** colorizing strings
(define-syntax ->
  (syntax-rules ()
      ((-> value) value)
      ((-> value (fn args ...) rest ...)
       (-> (fn value args ...) rest ...))
      ((-> value fn rest ...)
       (-> (fn value) rest ...))))

(define (highlight color-code target-substring str)
  (let ([colorize (string-append (string #\esc #\[) "38;5;" (number->string color-code) "m")]
        [color-reset (string-append (string #\esc #\[) "0m")]
        [match-data (string-match target-substring str)])
    (if match-data
        (regexp-substitute #f match-data
                           'pre colorize 0 color-reset 'post)
        str)))

(define (ball str) (highlight 216 "o" str))
(define (rim str) (highlight 208 "=--" str))
(define (net str) (highlight 252 "##" str))
(define (backboard str) (highlight 253 "/|" (highlight 253 "\|" str)))
(define (celtics str) (highlight 83 "T" str))

;; (define (paint frame) (backboard (ball (rim (net frame)))))
(define (paint frame) (-> frame
                          ball
                          rim
                          net
                          backboard))

(define-macro (painted frame)
  (define (highlight color-code target-substring str)
    (let ([colorize (string-append (string #\esc #\[) "38;5;" (number->string color-code) "m")]
          [color-reset (string-append (string #\esc #\[) "0m")]
          [match-data (string-match target-substring str)])
      (if match-data
          (regexp-substitute #f match-data
                             'pre colorize 0 color-reset 'post)
          str)))

  (define (ball str) (highlight 216 "o" str))
  (define (rim str) (highlight 208 "=--" str))
  (define (net str) (highlight 252 "##" str))
  (define (backboard str) (highlight 253 "/|" (highlight 253 "\|" str)))
  (define (celtics str) (highlight 83 "T" str))

  (define (paint frame) (-> frame
                            ball
                            rim
                            net
                            backboard))

  (paint frame))

;; ** the OG
(define shot-image "
          o
/|   o         o
\\|=--            o
   ##
                   \\\\
                /   \\O
               O_/   T
               T    /|
               |\\  | |
_______________|_|________
")

;; ** swish frames
(define swish-frame-0 (painted "

/|
\\|=--
   ##              o
                   \\\\
                /   \\O
               O_/   T
               T    /|
               |\\  | |
_______________|_|________
"))

(define swish-frame-1 (painted "

/|
\\|=--            o
   ##                  \n\
                   \\\\
                /   \\O
               O_/   T
               T    /|
               |\\  | |
_______________|_|________
"))

(define swish-frame-2 (painted "

/|             o
\\|=--                 \n\
   ##                  \n\
                   \\\\
                /   \\O
               O_/   T
               T    /|
               |\\  | |
_______________|_|________
"))

(define swish-frame-3 (painted "
          o
/|                     \n\
\\|=--                 \n\
   ##                  \n\
                   \\\\
                /   \\O
               O_/   T
               T    /|
               |\\  | |
_______________|_|________
"))

(define swish-frame-4 (painted "
                       \n\
/|   o                 \n\
\\|=--                 \n\
   ##                  \n\
                   \\\\
                /   \\O
               O_/   T
               T    /|
               |\\  | |
_______________|_|________
"))

(define swish-frame-5 (painted "
                       \n\
/|                     \n\
\\|=--                 \n\
  ##                   \n\
                   \\\\
                /   \\O
               O_/   T
               T    /|
               |\\  | |
_______________|_|________
"))

(define swish-frame-6 (painted "
                       \n\
/|                     \n\
\\|=--                 \n\
   ##                  \n\
                   \\\\
  o             /   \\O
               O_/   T
               T    /|
               |\\  | |
_______________|_|________
"))

(define swish-frame-7 (painted "
                       \n\
/|                     \n\
\\|=--                 \n\
   ##                  \n\
                   \\\\
                /   \\O
               O_/   T
 o             T    /|
               |\\  | |
_______________|_|________
"))

(define swish-frame-8 (painted "
                       \n\
/|                     \n\
\\|=--                 \n\
   ##                  \n\
                   \\\\
                /   \\O
               O_/   T
               T    /|
               |\\  | |
_______________|_|________
"))

;; ** bank frames
(define bank-frame-0 (painted "

/|
\\|=--
   ##              o
                   \\\\
                /   \\O
               O_/   T
               T    /|
               |\\  | |
_______________|_|________
"))

(define bank-frame-1 (painted "

/|
\\|=--            o
   ##                 \n\
                   \\\\
                /   \\O
               O_/   T
               T    /|
               |\\  | |
_______________|_|________
"))

(define bank-frame-2 (painted "

/|             o
\\|=--                \n\
   ##
                   \\\\
                /   \\O
               O_/   T
               T    /|
               |\\  | |
_______________|_|________
"))

(define bank-frame-3 (painted "
         o
/|                    \n\
\\|=--
   ##
                   \\\\
                /   \\O
               O_/   T
               T    /|
               |\\  | |
_______________|_|________
"))

(define bank-frame-4 (painted "
     o         \n\
/|                   \n\
\\|=--                  \n\
   ##
                   \\\\
                /   \\O
               O_/   T
               T    /|
               |\\  | |
_______________|_|________
"))

(define bank-frame-5 (painted "
                       \n\
/|o                  \n\
\\|=--
   ##
                   \\\\
                /   \\O
               O_/   T
               T    /|
               |\\  | |
_______________|_|________
"))

(define bank-frame-6 (painted "

/|      \n\
\\|=--
    ##
                   \\\\
                /   \\O
               O_/   T
               T    /|
               |\\  | |
_______________|_|________
"))

(define bank-frame-7 (painted "
                       \n\
/|                     \n\
\\|=--                 \n\
   ##      \n\
     o             \\\\
                /   \\O
               O_/   T
               T    /|
               |\\  | |
_______________|_|________
"))

(define bank-frame-8 (painted "

/|
\\|=--
   ##
                   \\\\
                /   \\O
               O_/   T
      o        T    /|
               |\\  | |
_______________|_|________
"))

(define bank-frame-9 (painted "

/|
\\|=--
   ##
                   \\\\
                /   \\O
               O_/   T
               T    /|
               |\\  | |
_______________|_|________
"))

;; ** LISt Processing
;; (define swish-frames (map paint (list swish-frame-0 swish-frame-1 swish-frame-2 swish-frame-3 swish-frame-4 swish-frame-5 swish-frame-6 swish-frame-7 swish-frame-8)))
(define swish-frames (list swish-frame-0 swish-frame-1 swish-frame-2 swish-frame-3 swish-frame-4 swish-frame-5 swish-frame-6 swish-frame-7 swish-frame-8))

(define bank-frames (list bank-frame-0 bank-frame-1 bank-frame-2 bank-frame-3 bank-frame-4 bank-frame-5 bank-frame-6 bank-frame-7 bank-frame-8 bank-frame-9))

;; * drawing
;; ** moving the cursor
(define (-escape-code-with-numerical-arg N escape-code-suffix)
  (let ([escape-code-prefix (string #\esc #\[)])
    (display (string-append escape-code-prefix (number->string N) escape-code-suffix))))

(define (move-up-by n)
  (-escape-code-with-numerical-arg n "A"))

(define (move-down-by n)
  (-escape-code-with-numerical-arg n "B"))

(define (move-right-by n)
  (-escape-code-with-numerical-arg n "C"))

(define (move-left-by n)
  (-escape-code-with-numerical-arg n "D"))

;; ** clearing lines
(define (clear-whole-line) (-escape-code-with-numerical-arg 2 "K"))
(define (clear-lines-to n)
  (unless (> 1 n)
    (move-up-by 1)
    (clear-whole-line)
    (clear-lines-to (- n 1))))

;; ** drawing the frames
(define draw-frame
  (let ([prior-frame #f])
    (lambda (new-frame)
      (and prior-frame (clear-prior-frame prior-frame))
      (set! prior-frame new-frame)
      (display new-frame))))

(define (clear-prior-frame prior-frame)
  (usleep 90000)
  ;; move cursor upwards N lines and simply overwrite
  (let* ([frame-height (length (string-split prior-frame #\newline))]
         [distance-to-top-of-frame (- frame-height 1)])
    (clear-lines-to distance-to-top-of-frame)))

;; ** dumbass typewriter effects
(define* (typewrite text #:optional (delay 90000))
  (for-each
 (lambda (char)
   (display (string char))
   (usleep delay))
 (string->list text)))

(define* (backspace text #:optional (delay 90000))
  (for-each
   (lambda (_)
     (move-left-by 1)
     (display " ")
     (move-left-by 1)
     (usleep delay))
   (string->list text)))

;; * do it
(define (swish) (for-each draw-frame swish-frames))

(define (bank) (for-each draw-frame bank-frames))

(if (member "--bank" (command-line))
    (begin
      (bank)
      (newline)
      (typewrite "I didn't hear you call bank, lol" 20000)
      ;; (sleep 1)

      ;; (backspace "lol")
      ;; (typewrite "motherfucker" 30000)
      ;; (sleep 1)

      ;; (backspace "motherfucker" 20000)
      ;; (typewrite "lol ;D")
      (newline))
    (swish))

