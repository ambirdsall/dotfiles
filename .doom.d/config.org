#+TITLE: Alex Birdsall's doom emacs config

This is my doom config. It's a literate config, so the code snippets are living documentation; they
get exported to specific init files.

* structural detritus: file preambles that should come first in the output
There is a way to address this; look up noweb syntax in Info.

** top-of-file comment sections
*** TODO clean this up, it's not cute up at the top of the page
**** option one :: mark this top-level subtree as folded by default with property drawer
**** option two :: use noweb double angle bracket syntax to decouple source order and output order
*** packages.el
#+begin_src elisp :tangle packages.el
;; -*- no-byte-compile: t; -*-

#+end_src

*** config.el
#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

#+end_src

* whoami
Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets.

#+begin_src elisp
(setq user-full-name "Alex Birdsall"
      user-mail-address "ambirdsall@gmail.com")

;; GUI emacs? sure, be cute.
;; In the terminal? I said what I said.
(unless (display-graphic-p) (setq confirm-kill-emacs nil))
#+end_src

* Who configures the configuration?
I do.

[a definitely very cool picture goes here eventually, probably]

#+begin_src elisp
(map! :leader :desc "Open config.org" :ne "F" (cmd! (find-file (expand-file-name "config.org" doom-private-dir))))
#+end_src

** what kind of spaceship doesn't come with a spedometer?
#+begin_src elisp :tangle packages.el
(package! benchmark-init)
#+end_src

** a literate config
*** easy to get to
Since all my config, or nearly, lives in this file, it should be a one-stop hop to get here:
#+begin_src elisp
(map! :leader
      "fP" (cmd! (find-file "~/.doom.d/config.org"))
      "f." #'doom/open-private-config)
#+end_src

*** and tangled asynchronously
This is +taken+ shamelessly lifted from [[https://tecosaur.github.io/emacs-config/config.html][Tecosaur's config]]; since you seem to be the sort of eccentric
who reads emacs configs, odds are good that either you're already familiar with it or you should be.

#+begin_src emacs-lisp
(defvar +literate-tangle--proc nil)
(defvar +literate-tangle--proc-start-time nil)

(defadvice! +literate-tangle-async-h ()
  "A very simplified version of `+literate-tangle-h', but async."
  :override #'+literate-tangle-h
  (unless (getenv "__NOTANGLE")
    (let ((default-directory doom-private-dir))
      (when +literate-tangle--proc
        (message "Killing outdated tangle process...")
        (set-process-sentinel +literate-tangle--proc #'ignore)
        (kill-process +literate-tangle--proc)
        (sit-for 0.3)) ; ensure the message is seen for a bit
      (setq +literate-tangle--proc-start-time (float-time)
            +literate-tangle--proc
            (start-process "tangle-config"
                           (get-buffer-create " *tangle config*")
                           "emacs" "--batch" "--eval"
                           (format "(progn \
(require 'ox) \
(require 'ob-tangle) \
(setq org-confirm-babel-evaluate nil \
      org-inhibit-startup t \
      org-mode-hook nil \
      write-file-functions nil \
      before-save-hook nil \
      after-save-hook nil \
      vc-handled-backends nil \
      org-startup-folded nil \
      org-startup-indented nil) \
(org-babel-tangle-file \"%s\" \"%s\"))"
                                   +literate-config-file
                                   (expand-file-name (concat doom-module-config-file ".el")))))
      (set-process-sentinel +literate-tangle--proc #'+literate-tangle--sentinel)
      (run-at-time nil nil (lambda () (message "Tangling config.org"))) ; ensure shown after a save message
      "Tangling config.org...")))

(defun +literate-tangle--sentinel (process signal)
  (cond
   ((and (eq 'exit (process-status process))
         (= 0 (process-exit-status process)))
    (message "Tangled config.org sucessfully (took %.1fs)"
             (- (float-time) +literate-tangle--proc-start-time))
    (setq +literate-tangle--proc nil))
   ((memq (process-status process) (list 'exit 'signal))
    (pop-to-buffer (get-buffer " *tangle config*"))
    (message "Failed to tangle config.org (after %.1fs)"
             (- (float-time) +literate-tangle--proc-start-time))
    (setq +literate-tangle--proc nil))))

(defun +literate-tangle-check-finished ()
  (when (and (process-live-p +literate-tangle--proc)
             (yes-or-no-p "Config is currently retangling, would you please wait a few seconds?"))
    (switch-to-buffer " *tangle config*")
    (signal 'quit nil)))
(add-hook! 'kill-emacs-hook #'+literate-tangle-check-finished)
#+end_src
** this config [[https://en.wikipedia.org/wiki/Unitarian_Universalist_Association#Principles_and_purposes][covenants to affirm and promote the inherent worth and dignity]] of every computer it's installed on
I was raised by and around a bunch of earnest, wordy people; deal with it.

*** macOS?
I should probably make these definitions conditional, eh.
#+begin_src elisp
(setq! mac-command-modifier 'meta
       mac-option-modifier 'meta
       ns-function-modifier 'super)
#+end_src

*** The secrets I keep with myself, or: praise the Lord and pass the =.gitignore=
#+begin_src elisp
(let ((private-config (concat doom-private-dir "local.el")))
  (and (file-exists-p private-config) (load private-config)))
#+end_src

* dashboard
cf. [[https://tecosaur.github.io/emacs-config/config.html#dashboard-quick-actions][tecosaur's config]], whence this came. Teco adds some additional code to clean
up the appearance of the dashboard; this could use some similar TLC as a follow-up.
#+begin_src elisp
(defun +doom-dashboard-setup-modified-keymap ()
  (setq +doom-dashboard-mode-map (make-sparse-keymap))
  (map! :map +doom-dashboard-mode-map
        :desc "Find file" :ne "f" #'find-file
        :desc "Recent files" :ne "r" #'consult-recent-file
        :desc "Config dir" :ne "C" #'doom/open-private-config
        :desc "Open config.org" :ne "c" (cmd! (find-file (expand-file-name "config.org" doom-private-dir)))
        :desc "Open dotfile" :ne "." (cmd! (doom-project-find-file "~/.config/"))
        :desc "Notes (roam)" :ne "n" #'org-roam-node-find
        :desc "Switch buffer" :ne "b" #'+vertico/switch-workspace-buffer
        :desc "Switch buffers (all)" :ne "B" #'consult-buffer
        :desc "IBuffer" :ne "i" #'ibuffer
        :desc "Previous buffer" :ne "p" #'previous-buffer
        :desc "Set theme" :ne "t" #'consult-theme
        :desc "Quit" :ne "Q" #'save-buffers-kill-terminal
        :desc "Show keybindings" :ne "h" (cmd! (which-key-show-keymap '+doom-dashboard-mode-map))))

(add-transient-hook! #'+doom-dashboard-mode (+doom-dashboard-setup-modified-keymap))
(add-transient-hook! #'+doom-dashboard-mode :append (+doom-dashboard-setup-modified-keymap))
(add-hook! 'doom-init-ui-hook :append (+doom-dashboard-setup-modified-keymap))

(map! :leader :desc "Dashboard" "d" #'+doom-dashboard/open)
#+end_src
* ui
** typography
Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ ~doom-font~
+ ~doom-variable-pitch-font~
+ ~doom-big-font~ -- used for ~doom-big-font-mode~; use this for
  presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:
+ ~doom-font~
+ ~doom-variable-pitch-font~

#+begin_src elisp
(setq doom-font "Fira Code")
;; ;; why doesn't the sizing work?!?!?!?!?!?!?!?
(setq doom-variable-pitch-font (if IS-MAC "Baskerville-18" "LibreBaskerville"))
#+end_src

Additionally, there are emojis:
#+begin_src elisp :tangle packages.el
(package! emojify)
#+end_src

*** TODO [[https://www.reddit.com/r/emacs/comments/shzif1/n%CE%BBno_font_stack/][NANO emacs font stack]]
** Theme this bad boy
#+begin_src elisp
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq amb/doom-dark-theme 'doom-vibrant
      amb/doom-light-theme 'doom-one-light)

;; TODO: amb/random-theme
;; this uses
(defun amb/toggle-themes ()
  "Cycle through a set of predefined themes according to whatever unholy logic is currently residing in its inner `cond' form."
  (interactive)
  (cond ((eq doom-theme amb/doom-dark-theme) (load-theme amb/doom-light-theme))
        (t (load-theme amb/doom-dark-theme))))
#+end_src

** line numbers
This determines the style of line numbers in effect. If set to ~nil~, line numbers are disabled. For
relative line numbers, set this to ~relative~.
#+begin_src elisp
(setq display-line-numbers-type 'relative)
#+end_src
** long lines: don't do 'em
#+begin_src elisp
(setq! fill-column 90)
(global-visual-line-mode -1)
#+end_src
** Window title
I’d like to have just the buffer name, then if applicable the project folder

#+begin_src elisp
(setq frame-title-format
      '(""
        (:eval
         (if (s-contains-p org-roam-directory (or buffer-file-name ""))
             (replace-regexp-in-string
              ".*/[0-9]*-?" "☰ "
              (subst-char-in-string ?_ ?  buffer-file-name))
           "%b"))
        (:eval
         (let ((project-name (projectile-project-name)))
           (unless (string= "-" project-name)
             (format (if (buffer-modified-p)  " ◉ %s" "  ●  %s") project-name))))))
#+end_src


For example when I open my config file it the window will be titled config.org ● doom then as soon as I make a change it will become config.org ◉ doom.
* odds and ends
** text manipulation
#+begin_src elisp
(defmacro on-string-or-region (fn)
  "Given a string-manipulation function FN, defines an interactive command which will apply that
function to either a string argument or to selected text, depending on context."
  `(lambda (string &optional from to)
     (interactive
      (if (use-region-p)
          (list nil (region-beginning) (region-end))
        (let ((bds (bounds-of-thing-at-point 'paragraph)))
          (list nil (car bds) (cdr bds)))))

     (let* ((work-on-string? (if string t nil))
            (input-str (if work-on-string?
                           string
                         (buffer-substring-no-properties from to)))
            (output-str (funcall ,fn input-str)))

       (if work-on-string?
           output-str
         (save-excursion
           (delete-region from to)
           (goto-char from)
           (insert output-str))))))

(defmacro def-text-operator (name fn)
  "Create a new interactive command bound to NAME using some
string manipulation function FN. It will work given a string
argument programmatically or by operating on selected text when
used interactively."
  `(fset ,name (on-string-or-region ,fn)))

(def-text-operator 'kebab-case #'s-dashed-words)
(def-text-operator 'pascal-case #'s-upper-camel-case)
(def-text-operator 'camel-case #'s-lower-camel-case)
(def-text-operator 'snake-case #'s-snake-case)
(def-text-operator 'screaming-snake-case #'(lambda (str) (s-upcase (s-snake-case str))))
(def-text-operator 'lower-words-case #'(lambda (str) (s-join " " (-map #'s-downcase (s-split-words str)))))
#+end_src

** TODO uncategorized keybindings :: clean up
#+begin_src elisp
(map!
 :leader
 :desc "prior buffer" "=" #'evil-switch-to-windows-last-buffer
 "Nr" #'narrow-to-region
 "Nf" #'narrow-to-defun
 "Np" #'narrow-to-page
 "Ns" #'org-toggle-narrow-to-subtree
 "Nw" #'widen
 :desc "jump to first non-blank" "of" #'evil-first-non-blank
 :desc "new frame" "oF" #'make-frame
 :desc "Open project TODOs.org file" "po" #'amb/goto-project-todos
 "tt" #'amb/toggle-themes
 "W" #'subword-mode)

(map!
 "C-;" #'evil-avy-goto-char-timer
 :ni "C-)" #'sp-forward-slurp-sexp
 :ni "C-(" #'sp-backward-slurp-sexp
 :n "M-/" #'+default/search-buffer
 (:when (not (display-graphic-p)) :map (evil-insert-state-map evil-motion-state-map) "C-z" #'suspend-frame))
#+end_src

*** TODO autoinsert templates :: might be cruft, revisit
#+begin_src elisp
(defun autoinsert-yas-expand()
  "Replace text in yasnippet template."
  (yas-expand-snippet (buffer-string) (point-min) (point-max)))
#+end_src

I know, I know.
#+begin_src elisp :tangle custom.el
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(auto-insert-alist
   '((("\\.vue\\'" . "Vue component")
      .
      ["template.vue" web-mode autoinsert-yas-expand])))
 '(auto-insert-directory "~/autoinsert-templates/")
 '(auto-insert-query nil)
 )
#+end_src
** copy filename relative to buffer
#+begin_src elisp
(after! projectile
  (defun yank-buffer-filename-relative-to-project ()
    "Copy the current buffer's path, relative to the project root, to the kill ring."
    (interactive)
    (if-let (filename (or buffer-file-name (bound-and-true-p list-buffers-directory)))
        (message (kill-new (f-relative filename (projectile-acquire-root))))
      (error "Couldn't find filename in current buffer"))))

(map! :leader "fY" #'yank-buffer-filename-relative-to-project)
#+end_src

* programming tools
** there are more languages under the sun than ~:lang~ can speak
*** fennel
#+begin_src elisp :tangle packages.el
(package! fennel-mode)
#+end_src

#+begin_src elisp
(use-package! fennel-mode
  :config (add-to-list 'auto-mode-alist '("\\.fnl\\'" . fennel-mode)))
#+end_src
*** graphql
#+begin_src elisp :tangle packages.el
(package! graphql-mode)
#+end_src

#+begin_src elisp
(use-package! graphql-mode)
#+end_src
*** elixir
#+begin_src elisp
(after! alchemist-mode
  (map! (:when (featurep! :lang elixir)    ; local conditional
        (:map alchemist-mode-map
         :n
         "C-j" #'tmux-navigate-down
         "C-k" #'tmux-navigate-up
         :localleader
         "tt" #'exunit-toggle-file-and-test
         "tT" #'exunit-toggle-file-and-test-other-window))))

#+end_src
*** the four most frustrating words in the english language: web development in emacs
First two sections largely +yoinked from+ courtesy of https://codeberg.org/ckruse/doom.d/src/commit/c6c7163e79a0fecdda6df9e81e60dc246170213a/config.el
**** typescript setup
#+begin_src elisp :tangle packages.el
(package! tsi :recipe (:type git :host github :repo "orzechowskid/tsi.el"))
(package! tsx-mode :recipe (:type git :host github :repo "orzechowskid/tsx-mode.el"))
#+end_src

#+begin_src elisp
(setq typescript-indent-level 2)

(use-package! tsx-mode
  :mode (("\\.tsx\\'" . tsx-mode))
  :hook (tsx-mode . lsp!)
  :hook (tsx-mode . rainbow-delimiters-mode)
  :hook (tsx-mode . add-node-modules-path)
  :custom (tsx-mode-tsx-auto-tags  t)
  :defer t
  :init
  (after! flycheck
    (flycheck-add-mode 'javascript-eslint 'tsx-mode))

  (add-hook! 'tsx-mode-hook
    (defun ck/tsx-setup ()
      (flycheck-select-checker 'javascript-eslint)
      (flycheck-add-next-checker 'javascript-eslint 'lsp)
      (pushnew! flycheck-disabled-checkers
                'javascript-jshint
                'tsx-tide
                'jsx-tide)))

  (set-electric! 'tsx-mode
    :chars '(?\} ?\))
    :words '("||" "&&")))
#+end_src

**** prettier et al with apheleia (until elken's module drops lol)
#+begin_src elisp :tangle packages.el
(package! apheleia)
  #+end_src

#+begin_src elisp
(use-package! apheleia
  :hook ((tsx-mode . apheleia-mode)
         (typescript-mode . apheleia-mode)
         (js-mode . apheleia-mode)
         (json-mode . apheleia-mode)
         (css-mode . apheleia-mode)
         (scss-mode . apheleia-mode))
  :defer t
  :config
  (push '(tsx-mode . prettier) apheleia-mode-alist)
  (push '(scss-mode . prettier) apheleia-mode-alist)
  (push '(css-mode . prettier) apheleia-mode-alist))
  #+end_src

**** web-mode
#+begin_src elisp
(setq! web-mode-markup-indent-offset 2
       web-mode-css-indent-offset 2
       web-mode-code-indent-offset 2)

(setq! web-mode-engines-alist
      '(("angular" . "\\.html")
        ("vue" . "\\.vue")
        ("phoenix" . "\\.html\\.eex")
        ("erb" . "\\.html\\.erb")))
#+end_src

**** TODO vue
Meanwhile, this little sucker is just _sitting_ in =custom.el=, hideous. This must be improved.
#+begin_quote
 '(auto-insert-alist
   '((("\\.vue\\'" . "Vue component")
      .
      ["template.vue" web-mode autoinsert-yas-expand])))
#+end_quote

**** tailwindcss
#+begin_src elisp :tangle packages.el
(package! lsp-tailwindcss :recipe (:host github :repo "merrickluo/lsp-tailwindcss"))
#+end_src

#+begin_src elisp
(use-package! lsp-tailwindcss
  :after lsp)
#+end_src

** git
*** nice git conflic resolution hydra
#+begin_src elisp
;; all thanks and apologies to https://github.com/alphapapa/unpackaged.el
(use-package! smerge-mode
  :after (hydra magit)
  :config
  (defhydra unpackaged/smerge-hydra
    (:color pink :hint nil :post (smerge-auto-leave))
    "
^Move^       ^Keep^               ^Diff^                 ^Other^
^^-----------^^-------------------^^---------------------^^-------
_n_ext       _b_ase               _<_: upper/base        _C_ombine
_p_rev       _u_pper              _=_: upper/lower       _r_esolve
^^           _l_ower              _>_: base/lower        _k_ill current
^^           _a_ll                _R_efine
^^           _RET_: current       _E_diff
"
    ("n" smerge-next)
    ("p" smerge-prev)
    ("b" smerge-keep-base)
    ("u" smerge-keep-upper)
    ("l" smerge-keep-lower)
    ("a" smerge-keep-all)
    ("RET" smerge-keep-current)
    ("\C-m" smerge-keep-current)
    ("<" smerge-diff-base-upper)
    ("=" smerge-diff-upper-lower)
    (">" smerge-diff-base-lower)
    ("R" smerge-refine)
    ("E" smerge-ediff)
    ("C" smerge-combine-with-next)
    ("r" smerge-resolve)
    ("k" smerge-kill-current)
    ("ZZ" (lambda ()
            (interactive)
            (save-buffer)
            (bury-buffer))
     "Save and bury buffer" :color blue)
    ("q" nil "cancel" :color blue))
  :hook (magit-diff-visit-file . (lambda ()
                                   (when smerge-mode
                                     (unpackaged/smerge-hydra/body)))))
#+end_src

*** make magit play nicely with window configurations
#+begin_src elisp
(after! magit
  ;; strictly speaking unnecessary (it's the default)
  ;; (add-hook 'magit-pre-display-buffer-hook #'magit-save-window-configuration)
  (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
  (setq magit-bury-buffer-function #'magit-restore-window-configuration)

  (defun just-use-a-dash-instead-sheesh (_nope &rest _dontcare)
    (interactive)
    (self-insert-command 1 ?-))

  (advice-add 'magit-whitespace-disallowed :around #'just-use-a-dash-instead-sheesh))
#+end_src
** projectile
#+begin_src elisp
(setq! projectile-project-search-path '("~/c/"))
#+end_src
** code compass
#+begin_src elisp :tangle packages.el
(package! code-compass
  :recipe (:host github :repo "ag91/code-compass" :files (:defaults "pages" "scripts")))
#+end_src

#+begin_src elisp
(use-package! code-compass :defer t
              :config
               (setq c/exclude-directories '("node_modules" "bower_components" "vendor" "tmp" "images")
                     c/preferred-browser "open"))
#+end_src

* evil config
** additional packages
*** wait, is this split two tmux panes or two emacs windows?
WHO CARES
#+begin_src elisp :tangle packages.el
(package! evil-tmux-navigator
  :recipe (:host github :repo "ambirdsall/evil-tmux-navigator"))
(unpin! evil-tmux-navigator)
#+end_src

#+begin_src elisp
(use-package! evil-tmux-navigator
  :config (evil-tmux-navigator-bind-keys))
#+end_src

*** replace with register
#+begin_src elisp :tangle packages.el
(package! evil-replace-with-register)
#+end_src

#+begin_src elisp
(use-package! evil-replace-with-register
  :init (setq evil-replace-with-register-key (kbd "gr"))
  :config (evil-replace-with-register-install))
#+end_src
*** evil-exchange
#+begin_src elisp :tangle packages.el
(package! evil-exchange)
#+end_src

#+begin_src elisp
(use-package! evil-exchange
  :config (evil-exchange-install))
#+end_src
*** match all the pairs
#+begin_src elisp :tangle packages.el
(package! evil-matchit)
#+end_src

#+begin_src elisp
(use-package! evil-matchit
  :config (global-evil-matchit-mode 1))
#+end_src
*** additional text objects
#+begin_src elisp :tangle packages.el
(package! evil-textobj-line
  :recipe (:host github :repo "emacsorphanage/evil-textobj-line"))
#+end_src

#+begin_src elisp
(use-package! evil-textobj-line
  :after evil)
#+end_src
** changing up some default settings
#+begin_src elisp
(setq! evil-ex-search-persistent-highlight nil
       +evil-want-o/O-to-continue-comments nil)
#+end_src

You can have my ~evil-substitute~ when you pry it from my cold, dead fingers.
#+begin_src elisp :tangle packages.el
(package! evil-snipe :disable t)
#+end_src

** TODO jump into/around a visual selection
=SPC v= is (or was, at time of writing) not a default binding in [[file:~/.emacs.d/modules/config/default/+evil-bindings.el][doom's default evil bindings]]; that seems like a potential oversight.

- If region is not active, works like vim's =gv=
- else, DWIM selection changes
  + cycle through structural selectors?
    - if tree mode is available?
  + that "expand visual selection" package
  + ?

* org-mode config
Notes must be at hand to be helpful, ideally on any of several computers:
#+begin_src elisp
(setq org-directory "~/Dropbox/org/")
#+end_src

With that out of the way, a grab-bag of tweaks and variables.
#+begin_src elisp
(setq! org-log-into-drawer t
       org-hierarchical-todo-statistics nil
       org-refile-use-outline-path 'full-file-path
       org-todo-keywords '((sequence "NEXT(n)" "TODO(t)" "BLOCKED(b)" "SOMEDAY(s)" "PROJ(p)" "QUESTION(q)" "|" "DONE(d)" "CANCELLED(c)")))

(custom-set-faces!
  '(outline-1 :weight extra-bold :height 1.25)
  '(outline-2 :weight bold :height 1.15)
  '(outline-3 :weight bold :height 1.12)
  '(outline-4 :weight semi-bold :height 1.09)
  '(outline-5 :weight semi-bold :height 1.06)
  '(outline-6 :weight semi-bold :height 1.03)
  '(outline-8 :weight semi-bold)
  '(outline-9 :weight semi-bold))

(setq!
 org-hide-emphasis-markers t
 org-agenda-filter-preset '("-quotidian"))

(add-hook! (org-mode) (org-appear-mode 1))
#+end_src

** roam
First, I need a roam directory to serve as the "slipbox":
#+begin_src elisp
(setq org-roam-directory "~/Dropbox/roam/")
#+end_src

I'd like a pretty and interactive graph visualization, too, while I'm at it:
#+begin_src elisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

Org-roam-ui tries to keep up with the latest features of org-roam, which conflicts with Doom Emacs's desire for stability. To make sure nothing breaks, use the latest version of org-roam by unpinning it:
#+begin_src elisp :tangle packages.el
(unpin! org-roam)
(package! org-roam-ui)
#+end_src

** every project has a =todo.org= and every =todo.org= can just be hardlinks of the same underlying file
This pair of variables is required to let you open the same hardlinked todo.org inode in multiple
project-specific locations in the filesystem, and have each maintain its local context (e.g. when
running projectile functions acting on what filesystem heuristics see as the surrounding VC
project). It's an idiosyncratic pattern, but it works brilliantly for me on work computers.

#+begin_src elisp
(setq! find-file-existing-other-name nil
       find-file-visit-truename nil)

(after! projectile
  (defun amb/goto-project-todos ()
    (interactive)
    ;; TODO dynamically create one if missing? This system can be improved further.
    (find-file (concat (projectile-project-root) "todo.org"))))
#+end_src

** the yet-neglected agenda view
#+begin_src elisp
;; TODO verify whether explicitly setting agenda files prevents automatic
;; detection of new files in ~/notes/*.org
(setq! org-agenda-files '("~/Dropbox/org/todo.org"
                          "~/c/monorail/todo.org"
                          "~/Dropbox/org/notes.org"
                          "/Users/alex.birdsall/Dropbox/org/car.org"
                          "/Users/alex.birdsall/Dropbox/org/doom.org"
                          "/Users/alex.birdsall/Dropbox/org/food.org"
                          "/Users/alex.birdsall/Dropbox/org/indiegogo.org"
                          "/Users/alex.birdsall/Dropbox/org/linux.org"
                          "/Users/alex.birdsall/Dropbox/org/nba.org"
                          "/Users/alex.birdsall/Dropbox/org/house.org"))

(defun org-my-auto-exclude-fn (tag)
  (if (cond
       ;; TODO show only the next 2
       ((string= tag "quotidian")
        t)
       ;; only see work things between 8am and 7pm
       ((string= tag "work")
        (let ((hr (nth 2 (decode-time))))
          (or (< hr 8) (> hr 19)))))
      (concat "-" tag)))

(setq org-agenda-auto-exclude-function 'org-my-auto-exclude-fn)

#+end_src
** keybinding fixes
#+begin_src elisp
(map! :after org
 :map 'org-mode-map
      "<tab>" 'org-cycle)
#+end_src

** outlines ✨ everywhere ✨with outshine
#+begin_src elisp :tangle packages.el
(package! outshine
  :recipe (:host github :repo "alphapapa/outshine"))
#+end_src

#+begin_src elisp
(use-package! outshine
  :after org
  :config
  (add-hook 'prog-mode-hook 'outshine-mode))
#+end_src
** 📉_(ツ)_📈
#+begin_src elisp :tangle packages.el
(package! graphviz-dot-mode)
#+end_src

#+begin_src elisp
(use-package! graphviz-dot-mode
  :after org)
#+end_src
** export backends
#+begin_src elisp :tangle packages.el
(package! ox-gfm)
#+end_src

#+begin_src elisp
;; TODO: figure out doom's org exporter API
;; (after! org
;;   '(require 'ox-gfm nil t))
(use-package! ox-gfm
  :after org)

#+end_src

* the rest of the computer environment

** pimp my +ride+ guile
This is my guile repl config; it relies on the [[https://gitlab.com/NalaGinrut/guile-colorized][guile-colorized]] library, which
isn't packaged with the language and is therefore a big hassle to use across
different computers, so it only tangles if that file is in the load path.

This is begging for a better solution; for example, using racket instead of
guile (BOOM, GOT 'EM).

#+begin_src guile :tangle (if (string-equal "exists" (shell-command-to-string "test -e `guile -c \"(display (string-append (car %load-path) \\\"/ice-9/colorized.scm\\\"))\"` && echo -n exists")) "~/.guile" "no")
(use-modules
 (ice-9 colorized)
 (oop goops)
 (ice-9 match)
 (ice-9 readline))

(activate-readline)
(activate-colorized)
#+end_src

But installing a special guile lib and running its (rather manual) installation
process is annoying; until I properly automate it in [[file:~/Makefile][my dotfiles' Makefile]], a
hideously copy-pasted near-duplicate will have to do.
#+begin_src guile :tangle (if (not (string-equal "exists" (shell-command-to-string "test -e `guile -c \"(display (string-append (car %load-path) \\\"/ice-9/colorized.scm\\\"))\"` && echo -n exists"))) "~/.guile" "no")
(use-modules
 (oop goops)
 (ice-9 match)
 (ice-9 readline))

(activate-readline)
#+end_src
